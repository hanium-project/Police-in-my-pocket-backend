name: Backend CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: make application-mysql.yml
      run: |
        cd ./src/main/resources
        touch ./application-mysql.yml
        echo "${{ secrets.DATABASE }}" >> ./application-database.yml
      shell: bash
    
    - name: make application-message.yml
      run: |
          cd ./src/main/resources
          touch ./application-message.yml
          echo "${{ secrets.MESSAGE }}" >> ./application-message.yml
      shell: bash
    
    - name: make application-email.yml
      run: |
        cd ./src/main/resources
        touch ./application-email.yml
        echo "${{ secrets.EMAIL }}" >> ./application-email.yml
      shell: bash
      
    - name: make .env file
      run: |
        touch ./.env
        echo "${{ secrets.ENV }}" >> ./.env
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
        
    - name: Build with Gradle
      run: ./gradlew clean build
      
    - name: Test with Gradle
      run: ./gradlew test
      
    - name: docker-compose test
      run: docker-compose up -d --build
      
  build-docker:
    needs: ci
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
       
      # 하나의 가상 컴퓨터를 구축해주는 소프트웨어
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Login Dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build with Gradle
        run: ./gradlew clean build
          
      - name: Dockerfile Build
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/hanium-cd .

        # dockerhub의 레포지토리 이름과 도커 이미지 이름을 똑같이 해줘야 한다.
      - name: Dockerfile push to repo
        run: docker push ${{ secrets.DOCKER_USERNAME }}/hanium-cd
          
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
        
  cd:
    needs: build-docker
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@master
      
      - name: copy file via ssh password
        # 원격 ssh 실행
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          source: "docker-compose-cd.yml"
          target: "/home/ubuntu/"
          
      - name: remote ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: "docker-compose-cd.yml pull && docker-compose -f docker-compose-cd.yml up -d --build"
