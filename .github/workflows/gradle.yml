# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Backend CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# permissions:
#  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
          
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
      
    - name: Build with Gradle
      run: ./gradlew clean build
      
    - name: Build docker-compose
      run: docker-compose up -d --build
      
  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2 
    - name: Deploy in EC2
      env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
          HOSTNAME : ${{ secrets.AWS_IP_ADDRESS  }}
          USER_NAME : ubuntu

      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 400 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ubuntu@${HOSTNAME} '

          #Now we have got the access of EC2 and we will start the deploy .
          cd /home/ubuntu/CounterApp &&
          git checkout main &&
          git fetch --all &&
          git reset --hard origin/main&&
          git pull origin main &&
          docker-compose -f docker-compose.yml up -d --build 
        '
